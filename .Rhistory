}
#Retirement
years = 0
summ = 0
salary = 50000
spending = 17000
repeat{
years = years + 1
summ = summ*1.04
summ = summ + salary - spending
if(summ > 25*spending){
break
}
#Retirement
years = 0
summ = 0
salary = 50000
spending = 15000
repeat{
years = years + 1
summ = summ*1.04
summ = summ + salary - spending
if(summ > 25*spending){
break
}
#Retirement
months = 0
years = 0
summ = 0
salary = 50000
spending = 15000
repeat{
#years = years + 1
months = months + 1
summ = summ*1.03333333333333333333333333333333
summ = summ + salary - spending
if(summ > 25*spending){
break
}
months/12
#Retirement
months = 0
years = 0
summ = 0
salary = 50000
spending = 15000
repeat{
#years = years + 1
months = months + 1
summ = summ*1.003333333333333333333333333333333
summ = summ + salary - spending
if(summ > 25*spending){
break
}
months/12
#Retirement
months = 0
years = 0
summ = 0
salary = 50000
spending = 15000
repeat{
#years = years + 1
months = months + 1
summ = summ*1.003333333333333333333333333333333
summ = summ + salary/12 - spending/12
if(summ > 25*spending){
break
}
months/12
#Retirement
months = 0
years = 0
summ = 0
salary = 45000
spending = 15000
repeat{
#years = years + 1
months = months + 1
summ = summ*1.003333333333333333333333333333333
summ = summ + salary/12 - spending/12
if(summ > 25*spending){
break
}
months/12
#Retirement
months = 0
years = 0
summ = 0
salary = 45000
spending = 17000
repeat{
#years = years + 1
months = months + 1
summ = summ*1.003333333333333333333333333333333
summ = summ + salary/12 - spending/12
if(summ > 25*spending){
break
}
months/12
months = 0
years = 0
summ = 0
salary = 70000
spending = 17000
repeat{
#years = years + 1
months = months + 1
summ = summ*1.003333333333333333333333333333333
summ = summ + salary/12 - spending/12
if(summ > 25*spending){
break
}
months/12
months = 0
years = 0
summ = 0
salary = 71000
spending = 17000
repeat{
#years = years + 1
months = months + 1
summ = summ*1.003333333333333333333333333333333
summ = summ + salary/12 - spending/12
if(summ > 25*spending){
break
}
months/12
# Let's look at the week pattern of births in the United States in the year 2000.
x<-read.table('http://www.mypolyuweb.hk/~d898he/bth_us_2000_daily.txt',head=T)
head(x)
# This dataset contains daily birth (number of babies born in each day) # in the United States in the year 2000, from 2000-1-1 to 2000-12-31.
# The column 'day' shows the week-days, ie,
# 1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday,
# 7-Sunday.
# The column 'births' is the actual number of birth in each day.
# These are real data.
# We want to investigate that which day in a week has the highest
# or lowest number of new borns, ie, the week pattern of the birth
# in the United States.
# In this case, we will use boxplot and we will aslo need the command
# split, which means to split the dataset into seven categories,
# according to the week days.
boxplot(split(x$births, x$day))
# The value in the y-axis is vertical, we want to rotate it to
# horizontal
par(las=1)
boxplot(split(x$births, x$day))
# We can add label for x and y axis
mtext(side=1,line=2,text='week days (Monday to Sunday)')
mtext(side=2,line=3.5,text='daily births', las=0)
mtext(side=3,line=0,text='United States 2000')
# 10) You may save the figure into a file either pdf or jpeg format,
#       let's use pdf format here.
name<-'Dmitrii Krasheninnikov'
pdf('R_lab_1.pdf')
par(las=1,mar=c(3,5,2,2))
boxplot(split(x$births, x$day))
mtext(side=1,line=2,text='week days (Monday to Sunday)')
mtext(side=2,line=3.5,text='daily births', las=0)
mtext(side=3,line=0,text='United States, 2000')
mtext(side=3,line=-1,adj=0.95,name)
mtext(side=3,line=-2,adj=0.95,Sys.Date())
dev.off()
getwd()
?split()
"oryza" %in% "oryza sativa"
"oryza" %pin% "oryza sativa"
? %in%
?%in%
?in%
?in
?in()
"oryza" %in% "oryz"
choose(11,3)
choose(11,3) * 0.03^3  *   0.97^8
p1 = choose(11,3) * 0.03^3  *   0.97^8
p2 = choose(11,3) * 0.08^3  *   0.92^8
p3 = choose(11,3) * 0.15^3  *   0.85^8
matrix(c(p1,p2,p3))
matrix(c(p1,p2,p3)) * matrix(c(0.5,0.3,0.2))
joint = matrix(c(p1,p2,p3)) * matrix(c(0.5,0.3,0.2))
joint/sum(joint)
sum(joint)
round(joint/sum(joint), 4)
choose(3,0)
rm(list = ls())
p = matrix(c(0.1,0.2,0.3))
(1-p)^3
rates = matrix(c(0.5,0.3,0.2))
p*rates
joint = p*rates
conditionals = choose(3,0)*p^0* (1-p)^3
joint = conditionals*rates
joint
joint/sum(joint)
round(joint/sum(joint), 4)
accept = c(300,80,0)
accept = matrix(c(300,80,0))
reject = matrix(c(0,0,700))
posterior = round(joint/sum(joint), 4)
sum(accept * posterior)
sum(reject * posterior)
x = accept
accept = reject
reject = x
sum(accept * posterior)
sum(reject * posterior)
conditionals = choose(3,1)*p^1* (1-p)^2
conditionals = choose(3,2)*p^2* (1-p)^1
conditionals = choose(3,3)*p^3* (1-p)^0
conditionals = choose(3,1)*p^1* (1-p)^2
joint = conditionals*rates
joint
posterior1 = round(joint/sum(joint), 4)
conditionals = choose(3,2)*p^2* (1-p)^1
joint = conditionals*rates
posterior2 = round(joint/sum(joint), 4)
conditionals = choose(3,3)*p^3* (1-p)^0
joint = conditionals*rates
posterior3 = round(joint/sum(joint), 4)
sum(posterior1*reject)
sum(posterior1*accept)
sum(posterior2*reject)
sum(posterior2*accept)
sum(posterior3*reject)
sum(posterior3*accept)
choose(3,2)
1/8 * sum(posterior3*reject) + 3/8 *sum(posterior2*reject) + 3/8 *sum(posterior1*reject) + 1/8 * sum(posterior*accept)
1/8 * sum(posterior3*reject) + 3/8 *sum(posterior2*reject) + 3/8 *sum(posterior1*reject) + 1/8 * sum(posterior*accept) -140
sample(seq(1,9), 9, replace = FALSE)
# Clear Workspace
rm(list = ls())
# Necessary libraries
library(caret)
library(plyr)
library(Metrics)
library(mice)
library(RANN)
library(RColorBrewer)
# Set seed for reproducibility and also set working directory
set.seed(1)
setwd("D:/GitHub/OverconfidenceAnalysis/")
# Load the  data
RawData <- read.csv(file = "Predictions - Sheet1.csv")
# Take only outcomes that we already know
RawData<- RawData[is.na(RawData$outcome) == FALSE,]
n = dim(RawData)[1]
for (i in 1:n ) {
if (RawData$p[i] < 50)
{
RawData$p[i] = 100 - RawData$p[i]
RawData$outcome[i] = 1 - RawData$outcome[i]
}
RawData$p = RawData$p/100
# Plot p density
qplot(p, data=RawData, geom="histogram")
# Summarise data more effectively
p = unique(RawData$p)
forPlot <- data.frame(p)
q = dim(forPlot)[1]
for (i in 1:q ) {
forPlot$total[i] = sum(RawData$p == forPlot$p[i])
forPlot$valid[i] = sum((RawData$p[     RawData$outcome == 1   ]) == forPlot$p[i])
}
forPlot$validPercent = forPlot$valid/forPlot$total
# Plot the accuracy line
qplot(p, forPlot$validPercent, data=forPlot, geom = "line", size = 1) +geom_abline(slope = 1, intercept = 0, colour = "red" )
#RawData$outcome
#RawData$p
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercent)) +
scale_colour_brewer(palette="Blues") +
geom_line() +
geom_abline(slope = 1, intercept = 0)
#theme(panel.background = element_rect(fill = "gray42"))
overconfidence_plot
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercent)) +
scale_colour_brewer(palette="Blues") +
geom_line() +
geom_abline(slope = 1, intercept = 0) + scale_color_manual(values=c("#CC6666", "#9999CC"))
#theme(panel.background = element_rect(fill = "gray42"))
overconfidence_plot
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercent)) +
geom_line() +
geom_abline(slope = 1, intercept = 0) + scale_color_manual(values=c("#CC6666", "#9999CC"))
#theme(panel.background = element_rect(fill = "gray42"))
overconfidence_plot
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercent, color = accuracy)) +
geom_line() +
geom_abline(slope = 1, intercept = 0) + scale_color_manual(values=c("#CC6666", "#9999CC"))
#theme(panel.background = element_rect(fill = "gray42"))
overconfidence_plot
forPlot$accuracy = rep("accuracy", size(forPlot)[1])
forPlot$accuracy = rep("accuracy", sizeof(forPlot)[1])
forPlot$accuracy = rep("accuracy", dim(forPlot)[1])
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercent, color = accuracy)) +
geom_line() +
geom_abline(slope = 1, intercept = 0) + scale_color_manual(values=c("#CC6666", "#9999CC"))
#theme(panel.background = element_rect(fill = "gray42"))
overconfidence_plot
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
geom_abline(slope = 1, intercept = 0) + scale_color_manual(values=c("#CC6666", "#9999CC"))
#theme(panel.background = element_rect(fill = "gray42"))
overconfidence_plot
# Clear Workspace
rm(list = ls())
# Necessary libraries
library(caret)
library(plyr)
library(Metrics)
library(mice)
library(RANN)
library(RColorBrewer)
# Set seed for reproducibility and also set working directory
set.seed(1)
setwd("D:/GitHub/OverconfidenceAnalysis/")
# Load the  data
RawData <- read.csv(file = "Predictions - Sheet1.csv")
# Take only outcomes that we already know
RawData<- RawData[is.na(RawData$outcome) == FALSE,]
n = dim(RawData)[1]
for (i in 1:n ) {
if (RawData$p[i] < 50)
{
RawData$p[i] = 100 - RawData$p[i]
RawData$outcome[i] = 1 - RawData$outcome[i]
}
RawData$p = RawData$p/100
# Plot p density
qplot(p, data=RawData, geom="histogram")
# Summarise data more effectively
p = unique(RawData$p)
forPlot <- data.frame(p)
q = dim(forPlot)[1]
for (i in 1:q ) {
forPlot$total[i] = sum(RawData$p == forPlot$p[i])
forPlot$valid[i] = sum((RawData$p[     RawData$outcome == 1   ]) == forPlot$p[i])
}
forPlot$validPercentage = forPlot$valid/forPlot$total
forPlot$accuracy = rep("accuracy", dim(forPlot)[1])
# Plot the accuracy line
qplot(p, forPlot$validPercentage, data=forPlot, geom = "line", size = 1) +geom_abline(slope = 1, intercept = 0, colour = "red" )
#RawData$outcome
#RawData$p
png(filename = "overconfidence_plot.png", width = 800, height = 600)
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
geom_abline(slope = 1, intercept = 0) + scale_color_manual(values=c("#CC6666", "#9999CC"))
#theme(panel.background = element_rect(fill = "gray42"))
overconfidence_plot
dev.off()
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
geom_abline(slope = 1, intercept = 0) + scale_color_manual(values=c("#CC6666", "#9999CC"))
#theme(panel.background = element_rect(fill = "gray42"))
overconfidence_plot
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
geom_abline(slope = 1, intercept = 0) + scale_color_manual(values=c( "#9999CC"))
#theme(panel.background = element_rect(fill = "gray42"))
overconfidence_plot
# Clear Workspace
rm(list = ls())
# Necessary libraries
library(caret)
library(plyr)
library(Metrics)
library(mice)
library(RANN)
library(RColorBrewer)
# Set seed for reproducibility and also set working directory
set.seed(1)
setwd("D:/GitHub/OverconfidenceAnalysis/")
# Load the  data
RawData <- read.csv(file = "Predictions - Sheet1.csv")
# Take only outcomes that we already know
RawData<- RawData[is.na(RawData$outcome) == FALSE,]
n = dim(RawData)[1]
for (i in 1:n ) {
if (RawData$p[i] < 50)
{
RawData$p[i] = 100 - RawData$p[i]
RawData$outcome[i] = 1 - RawData$outcome[i]
}
RawData$p = RawData$p/100
# Plot p density
qplot(p, data=RawData, geom="histogram")
# Summarise data more effectively
p = unique(RawData$p)
forPlot <- data.frame(p)
q = dim(forPlot)[1]
for (i in 1:q ) {
forPlot$total[i] = sum(RawData$p == forPlot$p[i])
forPlot$valid[i] = sum((RawData$p[     RawData$outcome == 1   ]) == forPlot$p[i])
}
forPlot$validPercentage = forPlot$valid/forPlot$total
forPlot$accuracy = rep("accuracy", dim(forPlot)[1])
# Plot the accuracy line
qplot(p, forPlot$validPercentage, data=forPlot, geom = "line", size = 1) +geom_abline(slope = 1, intercept = 0, colour = "red" )
#RawData$outcome
#RawData$p
png(filename = "overconfidence_plot.png", width = 800, height = 600)
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
geom_abline(slope = 1, intercept = 0) + scale_color_manual(values=c( "#9999CC"))
#theme(panel.background = element_rect(fill = "gray42"))
overconfidence_plot
dev.off()
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
geom_abline(slope = 1, intercept = 0) + scale_color_manual(values=c( "#9999CC"))
#theme(panel.background = element_rect(fill = "gray42"))
overconfidence_plot
scale_x_continuous(limits = c(-0, 1)) +
geom_abline(slope = 1, intercept = 0) + scale_color_manual(values=c( "#9999CC"))
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
scale_x_continuous(limits = c(-0, 1)) +
geom_abline(slope = 1, intercept = 0) + scale_color_manual(values=c( "#9999CC"))
overconfidence_plot
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
scale_y_continuous(limits = c(0, 1)) +
geom_abline(slope = 1, intercept = 0) + scale_color_manual(values=c( "#9999CC"))
overconfidence_plot
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
scale_y_continuous(limits = c(0, 1)) +
geom_abline(slope = 1, intercept = 0, aes(color = accuracy)) +
scale_color_manual(values=c( "#9999CC"))
overconfidence_plot
forPlot$ideal = rep("ideal", dim(forPlot)[1])
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
scale_y_continuous(limits = c(0, 1)) +
geom_abline(slope = 1, intercept = 0, aes(color = ideal)) +
scale_color_manual(values=c( "#9999CC"))
overconfidence_plot
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
scale_y_continuous(limits = c(0, 1)) +
geom_abline(slope = 1, intercept = 0, aes(color = ideal)) +
scale_color_manual(palette = "blues")
overconfidence_plot
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
scale_y_continuous(limits = c(0, 1)) +
geom_abline(slope = 1, intercept = 0, aes(color = ideal)) +
scale_color_manual(palette = "Blues")
overconfidence_plot
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
scale_y_continuous(limits = c(0, 1)) +
geom_abline(slope = 1, intercept = 0, aes(color = ideal)) +
scale_color_manual(values=c( "#9999CC", "green"))
overconfidence_plot
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
scale_y_continuous(limits = c(0, 1)) +
geom_abline(slope = 1, intercept = 0, aes(color = ideal)) +
scale_color_manual(values=c( "#9999CC", "darkolivegreen"))
overconfidence_plot
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
scale_y_continuous(limits = c(0, 1)) +
geom_abline(slope = 1, intercept = 0, aes(color = ideal)) +
scale_color_manual(values=c( "#9999CC", "hotpink2"))
overconfidence_plot
# Clear Workspace
rm(list = ls())
# Necessary libraries
library(caret)
library(plyr)
library(RColorBrewer)
# Set seed for reproducibility and also set working directory
set.seed(1)
setwd("D:/GitHub/OverconfidenceAnalysis/")
# Load the  data
RawData <- read.csv(file = "Predictions - Sheet1.csv")
# Take only outcomes that we already know
RawData<- RawData[is.na(RawData$outcome) == FALSE,]
n = dim(RawData)[1]
for (i in 1:n ) {
if (RawData$p[i] < 50)
{
RawData$p[i] = 100 - RawData$p[i]
RawData$outcome[i] = 1 - RawData$outcome[i]
}
RawData$p = RawData$p/100
# Plot p density
qplot(p, data=RawData, geom="histogram")
# Summarise data more effectively
p = unique(RawData$p)
forPlot <- data.frame(p)
q = dim(forPlot)[1]
for (i in 1:q ) {
forPlot$total[i] = sum(RawData$p == forPlot$p[i])
forPlot$valid[i] = sum((RawData$p[     RawData$outcome == 1   ]) == forPlot$p[i])
}
forPlot$validPercentage = forPlot$valid/forPlot$total
forPlot$accuracy = rep("accuracy", dim(forPlot)[1])
forPlot$ideal = rep("ideal", dim(forPlot)[1])
# Plot the accuracy line
png(filename = "overconfidence_plot.png", width = 800, height = 600)
overconfidence_plot <- ggplot(forPlot, aes(x = p, y = validPercentage, color = accuracy)) +
geom_line(size=2) +
scale_y_continuous(limits = c(0, 1)) +
geom_abline(slope = 1, intercept = 0, aes(color = ideal)) +
scale_color_manual(values=c( "#9999CC", "hotpink2"))
overconfidence_plot
dev.off()
